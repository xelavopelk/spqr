// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protos/meta_transaction.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetaTransactionService_ExecNoTran_FullMethodName = "/spqr.MetaTransactionService/ExecNoTran"
	MetaTransactionService_ExecTran_FullMethodName   = "/spqr.MetaTransactionService/ExecTran"
)

// MetaTransactionServiceClient is the client API for MetaTransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaTransactionServiceClient interface {
	ExecNoTran(ctx context.Context, in *ExecNoTranRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExecTran(ctx context.Context, in *MetaTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type metaTransactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaTransactionServiceClient(cc grpc.ClientConnInterface) MetaTransactionServiceClient {
	return &metaTransactionServiceClient{cc}
}

func (c *metaTransactionServiceClient) ExecNoTran(ctx context.Context, in *ExecNoTranRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MetaTransactionService_ExecNoTran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaTransactionServiceClient) ExecTran(ctx context.Context, in *MetaTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MetaTransactionService_ExecTran_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaTransactionServiceServer is the server API for MetaTransactionService service.
// All implementations must embed UnimplementedMetaTransactionServiceServer
// for forward compatibility.
type MetaTransactionServiceServer interface {
	ExecNoTran(context.Context, *ExecNoTranRequest) (*emptypb.Empty, error)
	ExecTran(context.Context, *MetaTransactionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMetaTransactionServiceServer()
}

// UnimplementedMetaTransactionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetaTransactionServiceServer struct{}

func (UnimplementedMetaTransactionServiceServer) ExecNoTran(context.Context, *ExecNoTranRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecNoTran not implemented")
}
func (UnimplementedMetaTransactionServiceServer) ExecTran(context.Context, *MetaTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecTran not implemented")
}
func (UnimplementedMetaTransactionServiceServer) mustEmbedUnimplementedMetaTransactionServiceServer() {
}
func (UnimplementedMetaTransactionServiceServer) testEmbeddedByValue() {}

// UnsafeMetaTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaTransactionServiceServer will
// result in compilation errors.
type UnsafeMetaTransactionServiceServer interface {
	mustEmbedUnimplementedMetaTransactionServiceServer()
}

func RegisterMetaTransactionServiceServer(s grpc.ServiceRegistrar, srv MetaTransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetaTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetaTransactionService_ServiceDesc, srv)
}

func _MetaTransactionService_ExecNoTran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecNoTranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTransactionServiceServer).ExecNoTran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTransactionService_ExecNoTran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTransactionServiceServer).ExecNoTran(ctx, req.(*ExecNoTranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaTransactionService_ExecTran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTransactionServiceServer).ExecTran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTransactionService_ExecTran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTransactionServiceServer).ExecTran(ctx, req.(*MetaTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaTransactionService_ServiceDesc is the grpc.ServiceDesc for MetaTransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaTransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spqr.MetaTransactionService",
	HandlerType: (*MetaTransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecNoTran",
			Handler:    _MetaTransactionService_ExecNoTran_Handler,
		},
		{
			MethodName: "ExecTran",
			Handler:    _MetaTransactionService_ExecTran_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/meta_transaction.proto",
}
